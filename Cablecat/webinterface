#!perl
require Cablecat;
use Data::Dumper;
#use Abills::Main;
my $Cablecat = Cablecat->new($db, $admin, \%conf);

my $debug = 1;

sub cablecat_main {
    my $main_tpl_vars = {
        MODULE_NAME => 'Cablecat',
        CABLECAT_SETTINGS_INDEX => get_function_index(),
        CABLECAT_STORAGE_INDEX  => get_function_index('cablecat_storage'),
        CABLECAT_LIVE_INDEX     => get_function_index(),
        CABLECAT_FIBERS_INDEX   => get_function_index('cablecat_fiber'),
    };
    $html->tpl_show(_include('cablecat_main', 'Cablecat'), $main_tpl_vars);
}

sub cablecat_storage {
    print "Storage";
}

sub cablecat_fiber {
    print "Fiber";
}

sub cablecat_cable_types_add {
    if ($debug) {
        print '$FORM{operation_type} eq "add"' . $FORM{operation_type} eq 'add';
    }
    # if has input params, try to add
    if ($FORM{operation_type} eq 'add'
        && check_required( $FORM{NAME},            "$_NAME",          'string' )
        && check_required( $FORM{MODULES_COUNT},   "$_MODULES_COUNT", 'number' )
        && check_required( $FORM{FIBERS_COUNT},    "$_FIBERS_COUNT",  'number' )
        && check_required( $FORM{COLOR_SCHEME_ID}, "$_COLOR_SCHEME",  'number' ) )
    {
        $Cablecat->cable_type_add(\%FORM);
        if (!$Cablecat->{errno}) {
            print $html->message('success', "$_ADDED", "$CABLE_TYPES_LIST_BTN");
        } else {
            print $html->message('danger', "$_ERROR: $Cablecat->{errno}", '', { ID => 1});
        }
    }
    else {
        my $cable_type_select = $html->form_select(
            'COLOR_SCHEME_ID',
            {
                SELECTED => $FORM{COLOR_SCHEME_ID},
                SEL_LIST => $Cablecat->color_schemes_list({COLS_NAME => 1}),
                NO_ID => 1
            }
        );

        $html->tpl_show(_include('cablecat_add_cable_type', 'Cablecat'), {
            COLOR_SCHEME => $cable_type_select,
            BTN_NAME     => $_ADD,
            CANCEL_BTN_HREF => "index=" . get_function_index('cablecat_cable_types_list'),
            OPERATION_TYPE => 'add'
        });
    }
}

sub cablecat_cable_types_change {
    my ($attr) = @_;

    if ($debug) {
        print '$FORM{operation_type} eq "change"' . $FORM{operation_type} eq 'change';
    }
    # if has input params, try to change
    if ($FORM{operation_type} eq 'change'
        && check_required($FORM{NAME}, "$_NAME", 'string')
        && check_required($attr->{ID}, "ID", 'number')
        && check_required($FORM{MODULES_COUNT}, "$_MODULES_COUNT", 'number')
        && check_required($FORM{FIBERS_COUNT}, "$_FIBERS_COUNT", 'number')
        && check_required($FORM{COLOR_SCHEME_ID}, "$_COLOR_SCHEME", 'number'))
    {
        $FORM{ID} = $attr->{ID};

        $Cablecat->cable_type_change(\%FORM, );
        if (!$Cablecat->{errno}) {
            print $html->message('success', "$_CHANGED");
            #            cablecat_cable_types_list();
        } else {
            print $html->message('danger', "$_ERROR: $Cablecat->{errno}", '', { ID => 1});
        }
    }
    else {
        my $cable_type_select = $html->form_select(
            'COLOR_SCHEME_ID',
            {
                SELECTED => $attr->{COLOR_SCHEME_ID},
                SEL_LIST => $Cablecat->color_schemes_list({COLS_NAME => 1}),
                NO_ID => 1
            }
        );

        $attr->{COLOR_SCHEME} = $cable_type_select;
        $attr->{OPERATION_TYPE} = 'change';
        $attr->{BTN_NAME} = $_CHANGE;
        $attr->{CANCEL_BTN_HREF} = "index=" . get_function_index('cablecat_cable_types_list');

        $html->tpl_show(_include('cablecat_add_cable_type', 'Cablecat'), $attr);
    }
}

sub cablecat_cable_types_list {
    #    check for delete operation
    if ($FORM{del}) {
        $Cablecat->cable_type_del({ ID => $FORM{del} });
        if (!$Cablecat->{errno}) {
            $html->message('success', "$_DELETED");
        }
    }

    if ($FORM{chg} || $FORM{operation_type} eq 'change') {
        print "<br>Inside change Section<br>" if ($debug);
        my $cable_type = - 1;
        if ($FORM{chg}) {
            $cable_type = $Cablecat->cable_type_get({ ID => $FORM{chg} });
        }
        else {
            $cable_type = $Cablecat->cable_type_get({ ID => $FORM{ID} });
        }
        #        print Dumper $cable_type;
        if ($cable_type != - 1) {
            cablecat_cable_types_change($cable_type);
        }
        return;
    }

    my ($table, $list) = result_former({
        INPUT_DATA => $Cablecat,
        FUNCTION => 'cable_types_list',
        BASE_FIELDS => 0,
        DEFAULT_FIELDS  => 'ID, NAME, MODULES, FIBERS, COLOR_SCHEME_NAME',
        FUNCTION_FIELDS => 'del,change',
        EXT_FIELDS     => 0,
        EXT_TITLES      => {
            'id'          => 'ID',
            'name'          => "$_TYPE",
            'modules_count'          => "$_MODULES_COUNT",
            'fibers_count'           => "$_FIBERS_COUNT",
            'color_scheme'           => "$_COLOR_SCHEME"
        },
        TABLE           => {
            width      => '100%',
            caption    => "$_CABLES $_TYPES",
            qs         => $pages_qs,
            ID         => 'CABLE_TYPES_LIST',
            header     => $status_bar,
            EXPORT     => 1,
            MENU       => "$_ADD:index=" . get_function_index('cablecat_cable_types_add') . ':add' . ";$_SEARCH:index=$index&search_form=1:search",
        },
        MAKE_ROWS    => 1,
        SEARCH_FORMER => 1,
        MODULE       => 'Cablecat',
        TOTAL        => 1
    });
}



sub cablecat_color_schemes_add {
    print "$_COLOR_SCHEME";
}

sub cablecat_color_schemes_list {
    my ($table, $list) = result_former({
        INPUT_DATA => $Cablecat,
        FUNCTION => 'color_schemes_list',
        BASE_FIELDS => 3,
        FUNCTION_FIELDS => 0,
        EXT_FIELDS     => 0,
        EXT_TITLES      => {
            'id'          => 'ID',
            'name'          => "$_TYPE",
            'colors_array'          => "$_COLORS",
            #            'colors_period'           => "$_FIBERS_COUNT"
        },
        TABLE           => {
            width      => '100%',
            caption    => "$_COLOR_SCHEME",
            qs         => $pages_qs,
            ID         => 'COLOR_SCHEMES_LIST',
            header     => $status_bar,
            EXPORT     => 1,
            MENU       => "$_ADD:index=" . get_function_index('cablecat_color_schemes_add') . ':add' . ";$_SEARCH:index=$index&search_form=1:search",
        },
        MAKE_ROWS    => 1,
        SEARCH_FORMER => 1,
        MODULE       => 'Cablecat',
        TOTAL        => 1
    });
}

#my %CABLECAT_CABLE_BIGHTS_TABLE = (
#    'TABLE_NAME' => 'cablecat_cable_bights',
#    'HUMAN_READABLE_NAME' => "$_CABLE_BIGHTS",
#    'HUMAN_READABLE_COLS' => (
#        'id' => 'ID',
#        'cable_type_id' => 'cable_type',
#        'meters_left'   => "$_METERS $_LEFT"
#    ),
#    'COLUMNS' => [
#        ['ID',            'INT', 'id', 1],
#        ['CABLE_TYPE_ID', 'INT', 'cable_type_id', 1],
#        ['METERS_LEFT',   'INT', 'meters_left', 1],
#    ]
#);
#
#my %tables = (
#    get_function_index('cablecat_cable_bights_list') => $CABLECAT_CABLE_BIGHTS_TABLE
#);


sub cablecat_cable_bights_list {
    my %cable_bights_table = (
        TABLE_NAME => 'cablecat_cable_bights',
        LIST_FUNC  => 'cable_bights_list',
        READABLE_NAME => "$_CABLE_BIGHTS",
        DEFAULT_FIELDS  => 'ID, CABLE_TYPE, METERS, METERS_LEFT, ADD_DATE',
        EXT_TITLES      => {
            'id'            => 'ID',
            'cable_type'    => "$_TYPE",
            'meters'        => "$_METERS_IN_BIGHT",
            'meters_left'   => "$_METERS_LEFT",
            'add_date'      => "$_ADDED",
        }
    );
    my $table_name = $cable_bights_table{TABLE_NAME};
    #    check for delete operation
    if ($FORM{del}) {
        $Cablecat->uni_delete({
            TABLE_NAME => $table_name,
            PARAMS => {
                ID => $FORM{del}
            }
        });
        if (!$Cablecat->{errno}) {
            $html->message('success', "$_DELETED");
        }
    }

    my $list = uni_result_former(\%cable_bights_table);

    #sum meters of cable according to cable_types
    print table_sum_by_type($list, 'cable_type', 'meters_left', {
        width   => '100%',
        caption => "$_TOTAL $_METERS_LEFT",
        title   => [$_CABLE_TYPE, $_METERS_LEFT],
        ID      => 'CABLES_LEFT_BY_TYPE'
    });

}

sub cablecat_cable_bights_add {
    # if has input params, try to add
    if ($FORM{operation_type} eq 'add'
        && check_required($FORM{CABLE_TYPE_ID}, "$_CABLE $_TYPE", 'number')
        && check_required($FORM{METERS}, "$_METERS", 'number'))
    {
        #When adding, meters_left equals to meters at all
        $FORM{METERS_LEFT} = $FORM{METERS};
        #Make current datetime
        $FORM{ADD_DATE} = 'NOW()';

        $FORM{TABLE_NAME} = 'cablecat_cable_bights';

        $Cablecat->uni_add(\%FORM);
        if (!$Cablecat->{errno}) {
            print $html->message('success', "$_ADDED");
        } else {
            print $html->message('danger', "$_ERROR $Cablecat->{errno}: $Cablecat->{errstr}",
            '', { ID => 1});
        }
    }
    # else show template
    else {

        my $cable_type_select = $html->form_select(
            'CABLE_TYPE_ID',
            {
                SELECTED => $FORM{CABLE_TYPE_ID},
                SEL_LIST => $Cablecat->cable_types_list({COLS_NAME => 1}),
                NO_ID => 1
            }
        );

        $html->tpl_show(_include('cablecat_add_cable_bight', 'Cablecat'), {
            CABLE_TYPE => $cable_type_select,
            BTN_NAME     => $_ADD,
            CANCEL_BTN_HREF => "index=" . get_function_index('cablecat_cable_bights_list'),
            OPERATION_TYPE => 'add'
        });
    }
}


sub cablecat_link_main {

}

sub cablecat_crosses_types_list {

}

sub cablecat_splitters_types_list {

}

sub cablecat_crosses_types_list {

}
=head2
function uni_result_former

=cut
sub uni_result_former {
    my $attr = shift;

    my ($table, $list) = result_former({
        INPUT_DATA      => $Cablecat,
        FUNCTION        => $attr->{LIST_FUNC},
        BASE_FIELDS     => 0,
        DEFAULT_FIELDS  => "$attr->{DEFAULT_FIELDS}",
        FUNCTION_FIELDS => 'del',
        SKIP_USER_TITLE => 1,
        EXT_FIELDS      => 0,
        EXT_TITLES      => $attr->{EXT_TITLES},

        TABLE           => {
            width       => '100%',
            caption     => $attr->{READABLE_NAME},
            qs          => $pages_qs,
            ID          => uc $attr->{LIST_FUNC},
            header      => $status_bar,
            EXPORT      => 1,
            MENU        => "$_ADD:index=" . get_function_index($attr->{TABLE_NAME} . '_add') . ':add' . ";$_SEARCH:index=$index&search_form=1:search",
        },

        MAKE_ROWS       => 1,
        SEARCH_FORMER   => 1,
        MODULE          => 'Cablecat',
        TOTAL           => 0
    });

    print $table->show();

    return $list;
}

sub table_sum_by_type{
    my $list = shift;
    my $type = shift;
    my $param = shift;
    my $table_params = shift;

    my %type_sum_hash = ();
    for my $hash (@$list) {
        $type_sum_hash{$hash->{$type}} += $hash->{$param};
    }

    # create table
    my $total_table = $html->table($table_params);

    # add rows for table
    for my $cable_type (keys %type_sum_hash) {
        #        print '<br>' . $bights{$cable_type};
        $total_table->addrow(
            $cable_type,
            $type_sum_hash{$cable_type}
        );
    }

    return $total_table->show();
}

sub check_required {
    #    my $self = shift;

    my $value = $_[0];
    my $name  = $_[1];
    my $type  = $_[2];

    my $error = 0;
    if ($debug) {
#        print "Checking FORM $name = $value<br />";
    }
    if ($type eq '') {
        print "<div class='alert alert-danger'>DEVELOP: No type given for $value, $name, $type</div>";
        return 0;
    }

    if (!$value) {
        $error = 1;
    }

    if ($type eq 'number') {
        $error = !($value > 0);
    }
    elsif ($type eq 'number') {
        $error = !($value eq '');
    };

    if ($error) {
        print "<div class='alert alert-danger'>$_FIELD \'$name\' $_IS_REQUIRED</div>";
        return 0;
    } else {
        return 1;
    }
}